{"version":3,"sources":["ApiServise.js","StateProvider.js","DateBuild.js","Spinner.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["Api","_apiKey","_apiBase","url","fetch","this","res","ok","Error","json","city","getResourse","lat","lon","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Spinner","className","App","useState","query","setQuery","error","setError","useContext","CITIES","dispatch","useEffect","localStorage","setItem","JSON","stringify","update","a","forEach","element","console","log","getWeatherFromCity","name","then","result","type","temp","main","loading","setLoading","currentCity","setCurrentCity","options","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","position","getWeatherFromCoordinate","coords","latitude","longitude","catch","onClick","key","sys","country","Date","Math","round","placeholder","onChange","e","target","filter","toUpperCase","length","temprature","alert","map","deleteCity","reverse","Boolean","window","location","hostname","match","parse","getItem","state","action","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a5561513.chunk.js","sourcesContent":["class ApiServise {\r\n  _apiKey = \"331e5bdb0a5057d00f4ca0cbaee61f51\";\r\n  _apiBase = \"https://api.openweathermap.org/data/2.5/\";\r\n\r\n  async getResourse(url) {\r\n    const res = await fetch(`${this._apiBase}${url}&appid=${this._apiKey}`);\r\n    if (!res.ok) {\r\n      throw new Error(\"Error\");\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getWeatherFromCity(city) {\r\n    return this.getResourse(`weather?q=${city}&units=metric`);\r\n  }\r\n\r\n  getWeatherFromCoordinate(lat, lon) {\r\n    return this.getResourse(`weather?lat=${lat}&lon=${lon}&units=metric`);\r\n  }\r\n}\r\n\r\nexport const Api = new ApiServise();\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","export function dateBuilder(d) {\r\n  let months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  let days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  let day = days[d.getDay()];\r\n  let date = d.getDate();\r\n  let month = months[d.getMonth()];\r\n  let year = d.getFullYear();\r\n\r\n  return `${day} ${date} ${month} ${year}`;\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <div className=\"loadingio-spinner-eclipse-8kvgy5l71h\">\r\n      <div className=\"ldio-0w1udl6720jf\">\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Api } from \"./ApiServise\";\nimport { useStateValue } from \"./StateProvider\";\nimport { dateBuilder } from \"./DateBuild\";\nimport Spinner from \"./Spinner\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n\n  const [error, setError] = useState(\"\");\n  const [{ CITIES }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    localStorage.setItem(\"cities\", JSON.stringify(CITIES));\n  }, [CITIES]);\n\n  // UPDATE DATA WHERE APP REFRESH OR ADD/DALETE NEW CITY\n\n  const update = async (CITIES) => {\n    CITIES.forEach((element) => {\n      console.log(element);\n      Api.getWeatherFromCity(element.name).then((result) =>\n        dispatch({\n          type: \"UPDATE_CITIES\",\n          name: element.name,\n          temp: result.main.temp,\n        })\n      );\n    });\n  };\n\n  // GET GEOPOSITION\n  const [loading, setLoading] = useState(false);\n\n  const [currentCity, setCurrentCity] = useState(null);\n\n  const getPosition = (options) => {\n    if (navigator.geolocation) {\n      new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n\n        setLoading(true);\n      })\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          Api.getWeatherFromCoordinate(\n            position.coords.latitude,\n            position.coords.longitude\n          ).then((result) => {\n            setLoading(false);\n            setCurrentCity(result);\n          });\n        })\n        .catch((error) => {\n          setLoading(false);\n          console.log(error);\n          setError(\"Please allow geolocation assess or try later\");\n        });\n    }\n  };\n\n  useEffect(() => {\n    getPosition();\n  }, []);\n\n  // SEARCH CITY\n  const search = () => {\n    setError(\"\");\n    if (\n      CITIES.filter((city) => city.name.toUpperCase() === query.toUpperCase())\n        .length === 0\n    ) {\n      Api.getWeatherFromCity(query)\n        .then((result) => {\n          dispatch({\n            type: \"ADD_CITY\",\n            name: result.name,\n            country: result.sys.country,\n            temprature: result.main.temp,\n          });\n          console.log(result);\n        })\n        .catch((error) => {\n          console.log(error);\n          setError(\"Can't add city, check city name \" + query);\n        });\n    } else {\n      alert(\"Already exist\");\n    }\n    setQuery(\"\");\n  };\n\n  const deleteCity = (city) => {\n    dispatch({\n      type: \"DELETE_CITY\",\n      name: city.name,\n    });\n  };\n\n  return (\n    <>\n      <main>\n        <button onClick={() => update(CITIES)}>UPDATE</button>\n        <h3 className=\"error\">{error}</h3>\n        {loading && <Spinner />}\n        <div className=\"current-city\">\n          {currentCity && (\n            <div key={currentCity.name}>\n              <h4>Weather in your city</h4>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {currentCity.name}, {currentCity.sys.country}\n                </div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {Math.round(currentCity.main.temp)}°c\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <button onClick={search}>ADD</button>\n        </div>\n        {CITIES.map((city) => {\n          if (city?.name) {\n            return (\n              <div key={city.name}>\n                <div className=\"location-box\">\n                  <div className=\"location\">\n                    {city.name}, {city.country}\n                  </div>\n                  <div className=\"date\">{dateBuilder(new Date())}</div>\n                </div>\n                <div className=\"weather-box\">\n                  <div className=\"temp\">{Math.round(city.temprature)}°c</div>\n                  <button onClick={() => deleteCity(city)}>DELETE</button>\n                </div>\n              </div>\n            );\n          }\n        }).reverse()}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\r\n  CITIES: JSON.parse(localStorage.getItem(\"cities\")) || [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_CITY\":\r\n      return {\r\n        ...state,\r\n        CITIES: [\r\n          ...state.CITIES,\r\n          {\r\n            name: action.name,\r\n            country: action.country,\r\n            temprature: action.temprature,\r\n          },\r\n        ],\r\n      };\r\n    case \"UPDATE_CITIES\":\r\n      return {\r\n        ...state,\r\n        CITIES: state.CITIES.map((city) => {\r\n          if (city.name == action.name) {\r\n            return {\r\n              ...city,\r\n              temprature: action.temp,\r\n            };\r\n          } else {\r\n            return {\r\n              ...city,\r\n            };\r\n          }\r\n        }),\r\n      };\r\n    case \"DELETE_CITY\":\r\n      return {\r\n        ...state,\r\n        CITIES: state.CITIES.filter((city) => city.name !== action.name),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./StateProvider\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}